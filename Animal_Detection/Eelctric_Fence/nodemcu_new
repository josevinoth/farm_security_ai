#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const int relayPin = 13;       // the pin that the relay is attached to
const int buzzerPin = 12;      // The pin that the buzzer is attached to
const int pwmPin = 3;          // PWM pin
const int pwmMax = 255;        // Maximum PWM value (255 corresponds to 5V)

const int lcdColumns = 16;
const int lcdRows = 2;
const int lcdAddress = 0x27;   // Change this address to match your LCD

LiquidCrystal_I2C lcd(lcdAddress, lcdColumns, lcdRows);

void setup() {
    // Initialize Serial communication
    Serial.begin(9600);
    Serial.println("Arduino Initialized");

    // Initialize the relay and buzzer pins as outputs
    pinMode(relayPin, OUTPUT);
    pinMode(buzzerPin, OUTPUT);
    pinMode(pwmPin, OUTPUT);

    // Turn off the relay initially
    digitalWrite(relayPin, HIGH);

    // Initialize the LCD
    lcd.begin(16,2);  // Begin the LCD
    lcd.backlight();  // Turn on the backlight
    lcd.clear();      // Clear the screen
    lcd.setCursor(0, 0);
    lcd.print("Object: Object");  // Initially, no object detected
}

void loop() {
    if (Serial.available() > 0) {
        String detected_object = ""; // Variable to store the received object data

        // Read each character until the end of the string
        while (Serial.available()) {
            char c = Serial.read(); // Read one character
            if (c != '0' && c != '1') {
                detected_object += c;   // Append it to the string
            }
            delay(5);  // Small delay to allow time for the next character
        }

        Serial.print("Received object: ");
        Serial.println(detected_object); // Debug print to check received data

        // Clear the LCD and print the received object directly
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Object Detected: ");
        lcd.setCursor(0, 1);  // Move cursor to the start of the second line
        lcd.print(detected_object);

        // Determine animal size and store it in animalSize variable
        String animalSize = ""; // Variable to store the animal size
        if (detected_object.indexOf("small") >= 0)
        {
            animalSize = "small";
        } else if (detected_object.indexOf("medium") >= 0)
        {
            animalSize = "medium";
        } else if (detected_object.indexOf("large") >= 0)
        {
            animalSize = "large";
        }

        // Check if "Human" is detected in the object string
        if (detected_object.indexOf("Human") >= 0)
        {
            // If "Human" is detected, turn off the relay
            Serial.println("Human detected: Turning OFF relay");
            digitalWrite(relayPin, HIGH); // Turn off the relay
        } else
        {
            // If any other animal is detected, turn on the relay
            Serial.println("Animal detected: Turning ON relay");
            digitalWrite(relayPin, LOW); // Turn on the relay
        }
    // Check animal size and adjust PWM voltage
        if (animalSize == "small")
        {
            // Set PWM voltage to 2.5V for small animals
            analogWrite(pwmPin, (int)(2.5 / 5.0 * pwmMax));  // Scale 2.5V to PWM
            Serial.println("Setting PWM to 2.5V (Small Animal)");
            delay(3000);
        } else if (animalSize == "medium") {
            // Set PWM voltage to 3.5V for medium animals
            analogWrite(pwmPin, (int)(3.5 / 5.0 * pwmMax));  // Scale 3.5V to PWM
            Serial.println("Setting PWM to 3.5V (Medium Animal)");
            delay(3000);
        } else if (animalSize == "large") {
            // Set PWM voltage to 4.5V for large animals
            analogWrite(pwmPin, (int)(4.5 / 5.0 * pwmMax));  // Scale 4.5V to PWM
            Serial.println("Setting PWM to 4.5V (Large Animal)");
            delay(3000);
        }
        // Buzzer code (remains unchanged)
        Serial.println("Turning on buzzer");
        digitalWrite(buzzerPin, HIGH); // Turn on the buzzer
        delay(5000);                   // Wait for 5 seconds
        Serial.println("Turning off buzzer");
        digitalWrite(buzzerPin, LOW);  // Turn off the buzzer
    }
}